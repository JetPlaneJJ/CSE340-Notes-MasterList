10:33:35	 From Xinkai Zhang : If we already implemented drawing positive slope lines, do we have to make any further changes?
10:34:57	 From FROST YOCKEY : Is there a course standard screen recorder?
10:35:39	 From Allyson Ely : Does the gitGrade tell us if we pass all the tests?
10:35:58	 From Brian Lee : No gitgrade will not tell you the results of the tests.
10:36:04	 From Jay Lin : It only tells you if your project compiled successfully
10:37:01	 From SCOTT EDWARD WEAVER : a
10:37:49	 From Allyson Ely : and we are not supplied any tests to verify before we turn in?
10:38:31	 From Michelle : You should be able to verify that your screenshots match the ones on the spec
10:38:46	 From FROST YOCKEY : I’m not getting the notification
10:38:48	 From NIKOLAI A SCHEEL : I'm not getting the popup
10:38:51	 From Yazan Maini : nope
10:38:52	 From Maria Lynn Frazey : It didn't work
10:38:55	 From Ally Zitzka : i didn’t get anything
10:38:56	 From YUXUAN LU : still here
10:39:07	 From YANGLU SHU : i don’t get the popup
10:39:10	 From MURATHAN SARAYLI : ^
10:39:11	 From Ray Van Hollebeke : Same here, no popup
10:39:17	 From Sabrina Mengmeng Wang : same
10:39:27	 From Xinjie Huang : I was sent to a breakout room by myself
10:39:35	 From Vladimir Ovechkin : ye I didn’t get a notification
10:41:16	 From Jay Lin : For reference: 1) introduce self + name 2) fav shirt color
10:41:53	 From Jay Lin : pollev.com/docbrick
10:48:13	 From Marco Xu : There is another rotate(degree, px, py) which allow you to choose pivot point
10:48:29	 From SHILE WEN : we gotta do it the hard way
10:48:40	 From JIAXIN LI : Are we allowed to use the easier way?
10:50:52	 From JIAXIN LI : After transformation, the bounding box would also change, right?
10:51:03	 From Ofek Inbar : yeah
10:51:36	 From Vladimir Ovechkin : setRotationY is an easier operation I think
10:52:21	 From TYLER JAMES DAO : So we’re moving the pointer to the center of the object being rotated?
10:52:43	 From SCOTT EDWARD WEAVER : moving the origin, yes
10:53:21	 From Jasper Palmer : Correct, we move the origin to the center of the object we are trying to rotate, then rotating it around the origin, and then putting the origin back!
10:55:03	 From JIAXIN LI : So while we are translating, the origin of the view is also keep changing. So what we need so is to keep the new origin ultimately in the original place?
10:55:33	 From Vladimir Ovechkin : exceed maximum recursion depth
10:58:08	 From Michelle : @Jiaxin I think you are correct - when you translate, are you essentially moving the origin so that it is now at the center of the object. This means that we can now rotate the object properly. Then we have to "reset" in a sense and move the origin back to where it was before we moved it so other methods will work as expected.
10:58:32	 From JIAXIN LI : Thanks!
11:01:01	 From FROST YOCKEY : can clip() increase the canvas size, or does this only decrease thesis with further iterations?
11:01:18	 From FROST YOCKEY : decrease the size**
11:06:58	 From ZEYNEP TOPRAKBASTI : but this animation doesn't use the canvas? what is the difference between animations using the canvas versus an objectanimator?
11:06:59	 From YANGLU SHU : what’s the difference between the old approach and the new approach for animation?
11:07:09	 From YANGLU SHU : it. seems like it is still frame-based for new approach
11:07:31	 From Brian Lee : What clip does is it cuts everything else outside the bounding box so it won't actually decrease the canvas size, it just gets rid of drawings outside the bounding box
11:07:33	 From NIKOLAI A SCHEEL : The new version handles frame drawing for you, so you don't have to think about it
11:07:42	 From YANGLU SHU : ok,  thanks!
11:09:06	 From JIAXIN LI : If we need a more complex path, the code would be rather long? Do we need to decompose every part of a path to make it a combination of small lines and curves?
11:10:26	 From SCOTT EDWARD WEAVER : we don't hear the sound
11:10:45	 From Ofek Inbar : I imagine you can keep the path information in an asset file like an SVG and load it at runtime
11:10:54	 From ZEYNEP TOPRAKBASTI : exaggerated paths!
11:11:04	 From NIKOLAI A SCHEEL : focus on momentum
11:11:07	 From FROST YOCKEY : Bold colors
11:11:35	 From Michelle : @Zeynep I believe the difference between using the canvas approach and ObjectAnimator is that you would have to call invalidate() in the canvas approach and therefore have a bit more control over the animation. 
11:12:11	 From ZEYNEP TOPRAKBASTI : thanks Michelle! I will probably have to go to office hours again though xD
11:16:49	 From Michelle : @Yanglu I think the new way of animations just provides more abstraction and separation of concerns. It could be that, under the hood, we still have a frame based approach. But with the new abstraction, it means that if we later find a better way to implement animations using a non-frame-based approach, they can change the implementation and everyone's animations would still work as expected 
11:19:23	 From Christina Zhang : will the evaluator grade part2?
11:21:00	 From YATING HAN : Do you grade on the appearance or internal correctness?
11:21:13	 From NIKOLAI A SCHEEL : Thank you!
11:21:21	 From Sage Khanuja : Thanks!
11:21:32	 From Jasper Palmer : Also, to clarify, the peer evaluators are only looking at your part 2 not your part 1!
11:21:35	 From Joshua Watrous : I have a question about adding images to our custom animation
11:22:11	 From JIAXIN LI : How about redundancy in the code?
11:23:23	 From Michelle : @Joshua What is your question? 
11:23:43	 From Danh Luong : I saw someone mentioned in ed about the pdf slides, are they available yet?
11:23:50	 From Simona Liao : Thank you!
11:24:19	 From JIAXIN LI : Do we have to separate chunks of repeated code into helper methods to decrease redundancy?
11:24:32	 From Joshua Watrous : How do we add the images? Do we add them to the drawables/ folder then reference them by name when creating an image view?
11:25:04	 From JIAXIN LI : ok
